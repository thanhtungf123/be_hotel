@startuml room_status_update_sequence_success

' Room Status Update - Successful Update (Available → Occupied)
title Room Status Update - Successful Status Change\n(Available → Occupied with Active Booking)

actor Admin
participant "Frontend\n(RoomManagement)" as Frontend
participant "RoomController" as Controller
participant "AuthHelper" as Auth
participant "RoomServiceImpl" as Service
participant "RoomRepository" as RoomRepo
participant "BookingRepository" as BookingRepo
database "Database" as DB

Admin -> Frontend: Selects room (Room 101)\nand changes status to "Có người ở"
Frontend -> Frontend: Confirm via window.confirm()
Frontend -> Frontend: Get X-Auth-Token from localStorage

Frontend -> Controller: PATCH /api/rooms/101/status\nBody: {"status": "occupied", "reason": null}
activate Controller

Controller -> Auth: requireAdmin(httpRequest)
activate Auth
Auth --> Controller: ✅ Admin authorized
deactivate Auth

Controller -> Service: updateRoomStatus(101, "occupied", null)
activate Service

Service -> Service: Validate "occupied" in\n["available", "occupied", "maintenance"]
Service --> Service: ✅ Valid status

Service -> RoomRepo: findById(101)
activate RoomRepo
RoomRepo -> DB: SELECT * FROM rooms\nWHERE room_id = 101
activate DB
DB --> RoomRepo: RoomEntity(id=101, status="available")
deactivate DB
RoomRepo --> Service: Optional[RoomEntity]
deactivate RoomRepo

Service -> Service: Check if currentStatus == newStatus
Service --> Service: "available" != "occupied" ✅

Service -> Service: validateStatusTransition(room, "available", "occupied")
activate Service

note right of Service
  Rule: available → occupied
  requires ACTIVE BOOKING
end note

Service -> BookingRepo: existsByRoom_IdAndStatusInAndCheckOutAfter(\n  roomId=101,\n  statuses=['pending','confirmed','checked_in'],\n  date=today)
activate BookingRepo
BookingRepo -> DB: SELECT COUNT(*) FROM bookings\nWHERE room_id=101 AND status IN (...)\nAND check_out > today
activate DB
DB --> BookingRepo: count = 1 (booking exists)
deactivate DB
BookingRepo --> Service: true ✅
deactivate BookingRepo

Service --> Service: ✅ Validation passed
deactivate Service

Service -> Service: room.setStatus("occupied")

Service -> RoomRepo: save(room)
activate RoomRepo
RoomRepo -> DB: UPDATE rooms\nSET status='occupied'\nWHERE room_id=101
activate DB
DB --> RoomRepo: (1 row affected)
deactivate DB
RoomRepo --> Service: RoomEntity(id=101, status="occupied")
deactivate RoomRepo

Service --> Controller: ✅ void (success)
deactivate Service

Controller -> Controller: Map RoomEntity → Room DTO

Controller --> Frontend: HTTP 200 OK\nBody: {"id":101, "status":"occupied", ...}
deactivate Controller

Frontend -> Frontend: Update table row:\n• Status badge → "Có người ở" (blue)\n• Dropdown reflects new value

Frontend --> Admin: ✅ Show alert:\n"Cập nhật trạng thái thành công!"

@enduml

