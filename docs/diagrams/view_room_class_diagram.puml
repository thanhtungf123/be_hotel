@startuml view_room_class_diagram

skinparam classAttributeIconSize 0
skinparam class {
    BackgroundColor LightYellow
    BorderColor Black
    ArrowColor Black
}

' ===== DTOs =====
class RoomSearchCriteria {
    - types: List<String>
    - amenities: List<String>
    - priceMin: Integer
    - priceMax: Integer
    - status: List<String>
    - sort: String
    - page: Integer
    - pageSize: Integer
    --
    + getters/setters
}

class Room {
    - id: Long
    - roomNumber: String
    - name: String
    - type: String
    - priceVnd: Integer
    - capacity: Integer
    - imageUrl: String
    - amenities: List<String>
    - status: String
    - isVisible: Boolean
    --
    + getters/setters
}

class "PagedResponse<T>" as PagedResponse {
    - data: List<T>
    - total: int
    - page: int
    - pageSize: int
    - totalPages: int
    --
    + getters/setters
}

' ===== Controller =====
class RoomController {
    - roomService: RoomService
    --
    + search(types: String,\n  amenities: String,\n  priceMin: Integer,\n  priceMax: Integer,\n  status: String,\n  sort: String,\n  page: Integer,\n  pageSize: Integer): ResponseEntity<PagedResponse<Room>>
}

' ===== Service Interface =====
interface RoomService {
    + search(criteria: RoomSearchCriteria): PagedResponse<Room>
}

' ===== Service Implementation =====
class RoomServiceImpl {
    - roomRepository: RoomRepository
    --
    + search(criteria: RoomSearchCriteria): PagedResponse<Room>
    - parseSort(sortString: String): Sort
    - setDefaultPrices(criteria: RoomSearchCriteria): void
}

' ===== Repository =====
interface RoomRepository {
    + findForList(statusList: List<String>,\n  typeList: List<String>,\n  priceMin: Integer,\n  priceMax: Integer,\n  amenitiesFilter: String,\n  pageable: Pageable): Page<RoomEntity>
}

' ===== Entity =====
class RoomEntity {
    - id: Integer
    - roomNumber: String
    - roomName: String
    - pricePerNight: Integer
    - capacity: Integer
    - description: String
    - amenities: String
    - imageUrl: String
    - status: String
    - isVisible: Boolean
    - bedLayout: BedLayout
    --
    + getters/setters
}

class BedLayout {
    - id: Integer
    - layoutName: String
    - description: String
    --
    + getters/setters
}

' ===== Mapper =====
class RoomMapper <<static>> {
    + toDto(entity: RoomEntity): Room
}

' ===== Relationships =====
RoomController ..> RoomService : uses
RoomController ..> RoomSearchCriteria : receives
RoomController ..> PagedResponse : returns

RoomService <|.. RoomServiceImpl : implements

RoomServiceImpl ..> RoomRepository : uses
RoomServiceImpl ..> RoomSearchCriteria : processes
RoomServiceImpl ..> PagedResponse : creates
RoomServiceImpl ..> RoomMapper : uses

RoomRepository ..> RoomEntity : queries

RoomEntity --> BedLayout : has

RoomMapper ..> RoomEntity : converts from
RoomMapper ..> Room : converts to

PagedResponse o-- Room : contains

note right of RoomSearchCriteria
  **Filter Parameters:**
  • types: Bed layout types
  • amenities: Required amenities
  • priceMin, priceMax: Price range
  • status: Room statuses
  
  **Pagination:**
  • page: Current page (default: 1)
  • pageSize: Items per page (default: 10)
  
  **Sorting:**
  • sort: "field:direction"
    (e.g., "price:asc", "name:desc")
end note

note bottom of RoomRepository
  **Query Logic:**
  1. Filter by status IN statusList
  2. Filter by type IN typeList (optional)
  3. Filter by price BETWEEN min-max
  4. Filter by amenities (LIKE for each)
  5. Only isVisible=true rooms
  6. Apply sorting from Pageable
  7. Apply pagination (OFFSET/LIMIT)
  
  **Returns:** Page<RoomEntity>
  (data + pagination metadata)
end note

note left of PagedResponse
  **Response Wrapper:**
  • data: List of filtered rooms
  • total: Total matching count
  • page, pageSize, totalPages
  
  **Used for:**
  • Displaying results
  • Pagination controls
  • "Tìm thấy X phòng" message
end note

@enduml

