@startuml room_status_update_class_diagram

' Room Status Update Feature - Class Diagram
title Room Status Update - Class Diagram

' DTOs and Request Objects
class RoomStatusUpdateRequest {
  - status: String
  - reason: String
  + getStatus(): String
  + setStatus(status: String): void
  + getReason(): String
  + setReason(reason: String): void
}

class Room {
  - id: Integer
  - roomNumber: String
  - name: String
  - status: String
  - priceVnd: Integer
  - capacity: Integer
  - isVisible: Boolean
  + getters and setters
}

' Controller Layer
class RoomController {
  - roomService: RoomService
  - authHelper: AuthorizationHelper
  + updateRoomStatus(id: Long, request: RoomStatusUpdateRequest): ResponseEntity<Room>
}

' Service Layer
interface RoomService {
  + updateRoomStatus(id: Long, newStatus: String, reason: String): void
}

class RoomServiceImpl {
  - roomRepository: RoomRepository
  - bookingRepository: BookingRepository
  - bedLayoutRepository: BedLayoutRepository
  + updateRoomStatus(id: Long, newStatus: String, reason: String): void
  - validateStatusTransition(room: RoomEntity, currentStatus: String, newStatus: String): void
  - hasActiveBooking(roomId: Integer): boolean
}

' Repository Layer
interface RoomRepository {
  + findById(id: Long): Optional<RoomEntity>
  + save(room: RoomEntity): RoomEntity
}

interface BookingRepository {
  + existsByRoom_IdAndStatusInAndCheckOutAfter(roomId: Integer, statuses: List<String>, date: LocalDate): boolean
}

' Entity
class RoomEntity {
  - id: Integer
  - roomNumber: String
  - roomName: String
  - status: String
  - pricePerNight: Integer
  - capacity: Integer
  - isVisible: Boolean
  - bedLayout: BedLayoutEntity
  + getters and setters
}

' Relationships
RoomController --> RoomService : uses
RoomController --> RoomStatusUpdateRequest : receives
RoomController --> Room : returns

RoomService <|.. RoomServiceImpl : implements
RoomServiceImpl --> RoomRepository : queries
RoomServiceImpl --> BookingRepository : validates
RoomServiceImpl --> RoomEntity : manipulates

RoomRepository --> RoomEntity : manages
BookingRepository --> RoomEntity : references

' Notes
note right of RoomServiceImpl::validateStatusTransition
  State Machine Rules:
  • available → occupied: must have booking
  • occupied → available: must NOT have booking
  • occupied → maintenance: must NOT have booking
  • maintenance → occupied: must have booking
  • available → maintenance: always allowed
  • maintenance → available: always allowed
end note

note bottom of RoomStatusUpdateRequest
  Used for PATCH /api/rooms/{id}/status
  Request Body: {"status": "...", "reason": "..."}
end note

@enduml

