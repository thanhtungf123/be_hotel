@startuml find_room_class_diagram

skinparam classAttributeIconSize 0
skinparam class {
    BackgroundColor LightYellow
    BorderColor Black
    ArrowColor Black
}

' ===== DTOs =====
class RoomAvailabilityRequest {
    - checkIn: LocalDate
    - checkOut: LocalDate
    - guests: Integer
    - priceMin: Integer
    - priceMax: Integer
    --
    + getters/setters
}

class Room {
    - id: Long
    - roomNumber: String
    - name: String
    - type: String
    - priceVnd: Integer
    - capacity: Integer
    - imageUrl: String
    - amenities: List<String>
    - status: String
    - isVisible: Boolean
    --
    + getters/setters
}

class "PagedResponse<T>" as PagedResponse {
    - data: List<T>
    - total: int
    - page: int
    - pageSize: int
    - totalPages: int
    --
    + getters/setters
}

' ===== Controller =====
class RoomController {
    - roomService: RoomService
    --
    + checkAvailability(checkIn: String,\n  checkOut: String,\n  guests: Integer,\n  priceMin: Integer,\n  priceMax: Integer): ResponseEntity<PagedResponse<Room>>
}

' ===== Service Interface =====
interface RoomService {
    + checkAvailability(req: RoomAvailabilityRequest): PagedResponse<Room>
}

' ===== Service Implementation =====
class RoomServiceImpl {
    - roomRepository: RoomRepository
    --
    + checkAvailability(req: RoomAvailabilityRequest): PagedResponse<Room>
    - validateDateRange(checkIn, checkOut): void
}

' ===== Repository =====
interface RoomRepository {
    + findAvailableRooms(minCapacity: Integer,\n  checkIn: LocalDate,\n  checkOut: LocalDate,\n  minPrice: Integer,\n  maxPrice: Integer): List<RoomEntity>
}

' ===== Entity =====
class RoomEntity {
    - id: Integer
    - roomNumber: String
    - roomName: String
    - pricePerNight: Integer
    - capacity: Integer
    - description: String
    - amenities: String
    - imageUrl: String
    - status: String
    - isVisible: Boolean
    - bedLayout: BedLayout
    --
    + getters/setters
}

class BookingEntity {
    - id: Integer
    - checkIn: LocalDate
    - checkOut: LocalDate
    - status: String
    - room: RoomEntity
    --
    + getters/setters
}

' ===== Mapper =====
class RoomMapper <<static>> {
    + toDto(entity: RoomEntity): Room
}

' ===== Relationships =====
RoomController ..> RoomService : uses
RoomController ..> RoomAvailabilityRequest : receives
RoomController ..> PagedResponse : returns

RoomService <|.. RoomServiceImpl : implements

RoomServiceImpl ..> RoomRepository : uses
RoomServiceImpl ..> RoomAvailabilityRequest : validates
RoomServiceImpl ..> PagedResponse : creates
RoomServiceImpl ..> RoomMapper : uses

RoomRepository ..> RoomEntity : queries
RoomRepository ..> BookingEntity : checks conflicts

RoomMapper ..> RoomEntity : converts from
RoomMapper ..> Room : converts to

PagedResponse o-- Room : contains

note right of RoomAvailabilityRequest
  **Request Parameters:**
  • checkIn, checkOut (required)
  • guests (required, min: 1)
  • priceMin, priceMax (optional)
  
  **Validation:**
  • checkIn < checkOut
  • checkIn >= today
end note

note bottom of RoomRepository
  **Query Logic:**
  1. Filter by status='available'
  2. Filter by capacity >= guests
  3. Filter by price range
  4. Exclude rooms with booking conflicts
  
  **Conflict Detection:**
  • Status IN ['pending', 'confirmed', 'checked_in']
  • Date overlap: checkIn < booking.checkOut
    AND checkOut > booking.checkIn
end note

note left of PagedResponse
  **Response Wrapper:**
  • data: List of available rooms
  • total: Total count
  • page, pageSize, totalPages
end note

@enduml

