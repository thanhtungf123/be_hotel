@startuml room_management_sequence

' Room Management CRUD - Complete Flow
title Room Management (Admin) - CRUD Operations\n(Create, Update, Delete with Validation)

actor Admin
participant "Frontend\n(RoomManagement)" as Frontend
participant "RoomController" as Controller
participant "AuthHelper" as Auth
participant "RoomServiceImpl" as Service
participant "RoomRepository" as RoomRepo
participant "BedLayoutRepository" as BedLayoutRepo
database "Database" as DB

Admin -> Frontend: Opens admin room management page
Frontend -> Frontend: Display room list with CRUD buttons

alt CREATE ROOM
    Admin -> Frontend: Clicks "Thêm phòng mới" button
    Frontend -> Frontend: Display create form
    Admin -> Frontend: Fills in room details:\n• Room number: "103"\n• Name, price, capacity\n• Bed layout, amenities
    Frontend -> Frontend: Client-side validation
    Frontend -> Frontend: Get X-Auth-Token
    
    Frontend -> Controller: POST /api/rooms\nBody: RoomRequest{roomNumber:"103",...}
    activate Controller
    
    Controller -> Auth: requireAdmin(httpRequest)
    activate Auth
    
    alt Not Admin
        Auth --> Controller: ❌ Forbidden
        deactivate Auth
        Controller --> Frontend: HTTP 403 Forbidden
        Frontend --> Admin: ❌ "Không có quyền truy cập"
    else Admin Authorized
        Auth --> Controller: ✅ Admin authorized
        deactivate Auth
        
        Controller -> Service: createRoom(request)
        activate Service
        
        Service -> RoomRepo: existsByRoomNumber("103")
        activate RoomRepo
        RoomRepo -> DB: SELECT COUNT(*) FROM rooms\nWHERE room_number='103'
        activate DB
        DB --> RoomRepo: count
        deactivate DB
        RoomRepo --> Service: boolean (true/false)
        deactivate RoomRepo
        
        alt Room Number Already Exists
            Service --> Controller: ❌ IllegalArgumentException\n"Room number already exists"
            Controller --> Frontend: HTTP 400 Bad Request
            Frontend --> Admin: ❌ "Số phòng đã tồn tại"
        else Room Number Unique
            Service -> Service: Validate price > 0
            
            alt Price Invalid
                Service --> Controller: ❌ IllegalArgumentException\n"Price must be positive"
                Controller --> Frontend: HTTP 400 Bad Request
                Frontend --> Admin: ❌ "Giá phòng phải lớn hơn 0"
            else Price Valid
                Service -> BedLayoutRepo: findById(bedLayoutId)
                activate BedLayoutRepo
                BedLayoutRepo -> DB: SELECT * FROM bed_layouts\nWHERE bed_layout_id=?
                activate DB
                DB --> BedLayoutRepo: BedLayoutEntity or null
                deactivate DB
                BedLayoutRepo --> Service: Optional[BedLayoutEntity]
                deactivate BedLayoutRepo
                
                alt Bed Layout Not Found
                    Service --> Controller: ❌ IllegalArgumentException\n"Bed layout not found"
                    Controller --> Frontend: HTTP 400 Bad Request
                    Frontend --> Admin: ❌ "Loại giường không tồn tại"
                else Bed Layout Valid
                    Service -> Service: Create RoomEntity\n• Set isVisible=true (default)\n• Set status='available' (default)
                    
                    Service -> RoomRepo: save(entity)
                    activate RoomRepo
                    RoomRepo -> DB: INSERT INTO rooms (...)\nVALUES (...)
                    activate DB
                    DB --> RoomRepo: Generated room_id
                    deactivate DB
                    RoomRepo --> Service: Saved RoomEntity (with ID)
                    deactivate RoomRepo
                    
                    Service -> Service: Map entity → Room DTO
                    Service --> Controller: ✅ Room DTO
                    deactivate Service
                    
                    Controller --> Frontend: HTTP 201 Created\nBody: {id:32, roomNumber:"103",...}
                    deactivate Controller
                    
                    Frontend -> Frontend: Add new room to table
                    Frontend --> Admin: ✅ "Tạo phòng thành công!"
                end
            end
        end
    end

else UPDATE ROOM
    Admin -> Frontend: Clicks "Sửa" button for room
    Frontend -> Frontend: Load room data into edit form
    Admin -> Frontend: Modifies fields (e.g., price, amenities)
    Frontend -> Frontend: Get X-Auth-Token
    
    Frontend -> Controller: PUT /api/rooms/{id}\nBody: RoomRequest{updated fields}
    activate Controller
    
    Controller -> Auth: requireAdmin(httpRequest)
    Auth --> Controller: ✅ Admin authorized
    
    Controller -> Service: updateRoom(id, request)
    activate Service
    
    Service -> RoomRepo: findById(id)
    activate RoomRepo
    RoomRepo -> DB: SELECT * FROM rooms WHERE room_id=?
    DB --> RoomRepo: RoomEntity or null
    RoomRepo --> Service: Optional[RoomEntity]
    deactivate RoomRepo
    
    alt Room Not Found
        Service --> Controller: ❌ IllegalArgumentException\n"Room not found"
        Controller --> Frontend: HTTP 404 Not Found
        Frontend --> Admin: ❌ "Không tìm thấy phòng"
    else Room Found
        Service -> Service: Validate room number uniqueness\n(if changed, exclude current room)
        Service -> Service: Validate price > 0
        Service -> Service: Validate bed layout (if changed)
        
        Service -> Service: Update entity fields with new values
        
        Service -> RoomRepo: save(entity)
        activate RoomRepo
        RoomRepo -> DB: UPDATE rooms SET ... WHERE room_id=?
        DB --> RoomRepo: (1 row affected)
        RoomRepo --> Service: Updated RoomEntity
        deactivate RoomRepo
        
        Service -> Service: Map entity → Room DTO
        Service --> Controller: ✅ Room DTO
        deactivate Service
        
        Controller --> Frontend: HTTP 200 OK\nBody: {updated room}
        deactivate Controller
        
        Frontend -> Frontend: Update room row in table
        Frontend --> Admin: ✅ "Cập nhật phòng thành công!"
    end

else DELETE ROOM
    Admin -> Frontend: Clicks "Xóa" button for room
    Frontend -> Frontend: Confirm via window.confirm()\n"Bạn có chắc muốn xóa phòng này?"
    
    alt User Cancels
        Frontend --> Admin: ❌ Action cancelled
    else User Confirms
        Frontend -> Frontend: Get X-Auth-Token
        
        Frontend -> Controller: DELETE /api/rooms/{id}
        activate Controller
        
        Controller -> Auth: requireAdmin(httpRequest)
        Auth --> Controller: ✅ Admin authorized
        
        Controller -> Service: deleteRoom(id)
        activate Service
        
        Service -> RoomRepo: findById(id)
        activate RoomRepo
        RoomRepo -> DB: SELECT * FROM rooms WHERE room_id=?
        DB --> RoomRepo: RoomEntity or null
        RoomRepo --> Service: Optional[RoomEntity]
        deactivate RoomRepo
        
        alt Room Not Found
            Service --> Controller: ❌ IllegalArgumentException\n"Room not found"
            Controller --> Frontend: HTTP 404 Not Found
            Frontend --> Admin: ❌ "Không tìm thấy phòng"
        else Room Found
            Service -> RoomRepo: deleteById(id)
            activate RoomRepo
            RoomRepo -> DB: DELETE FROM rooms\nWHERE room_id=?
            DB --> RoomRepo: (1 row deleted)
            RoomRepo --> Service: ✅ void
            deactivate RoomRepo
            
            Service --> Controller: ✅ void
            deactivate Service
            
            Controller --> Frontend: HTTP 204 No Content
            deactivate Controller
            
            Frontend -> Frontend: Remove room row from table
            Frontend --> Admin: ✅ "Xóa phòng thành công!"
        end
    end
end

@enduml

