@startuml room_status_update_sequence_maintenance

' Room Status Update - Maintenance Status with Reason
title Room Status Update - Maintenance Status Change\n(Available → Maintenance with Reason)

actor Admin
participant "Frontend\n(RoomManagement)" as Frontend
participant "RoomController" as Controller
participant "AuthHelper" as Auth
participant "RoomServiceImpl" as Service
participant "RoomRepository" as RoomRepo
database "Database" as DB

Admin -> Frontend: Selects room (Room 103)\nand changes status to "Bảo trì"
Frontend -> Frontend: Detect newStatus === "maintenance"
Frontend --> Admin: Prompt: "Lý do bảo trì (không bắt buộc):"
Admin --> Frontend: Enters: "Sửa chữa điều hòa"

Frontend -> Frontend: Confirm via window.confirm()
Frontend -> Frontend: Get X-Auth-Token from localStorage

Frontend -> Controller: PATCH /api/rooms/103/status\nBody: {"status": "maintenance",\n       "reason": "Sửa chữa điều hòa"}
activate Controller

Controller -> Auth: requireAdmin(httpRequest)
activate Auth
Auth --> Controller: ✅ Admin authorized
deactivate Auth

Controller -> Service: updateRoomStatus(103, "maintenance",\n                     "Sửa chữa điều hòa")
activate Service

Service -> Service: Validate "maintenance" in\n["available", "occupied", "maintenance"]
Service --> Service: ✅ Valid status

Service -> RoomRepo: findById(103)
activate RoomRepo
RoomRepo -> DB: SELECT * FROM rooms\nWHERE room_id = 103
activate DB
DB --> RoomRepo: RoomEntity(id=103, status="available")
deactivate DB
RoomRepo --> Service: Optional[RoomEntity]
deactivate RoomRepo

Service -> Service: Check if currentStatus == newStatus
Service --> Service: "available" != "maintenance" ✅

Service -> Service: validateStatusTransition(room, "available", "maintenance")
activate Service

note right of Service
  Rule: available → maintenance
  ALWAYS ALLOWED (no constraints)
end note

Service --> Service: ✅ Validation passed (no checks needed)
deactivate Service

Service -> Service: room.setStatus("maintenance")

Service -> RoomRepo: save(room)
activate RoomRepo
RoomRepo -> DB: UPDATE rooms\nSET status='maintenance'\nWHERE room_id=103
activate DB
DB --> RoomRepo: (1 row affected)
deactivate DB
RoomRepo --> Service: RoomEntity(id=103, status="maintenance")
deactivate RoomRepo

Service --> Controller: ✅ void (success)
deactivate Service

Controller -> Controller: Map RoomEntity → Room DTO

Controller --> Frontend: HTTP 200 OK\nBody: {"id":103, "status":"maintenance", ...}
deactivate Controller

Frontend -> Frontend: Update table row:\n• Status badge → "Bảo trì" (orange)\n• Dropdown reflects new value

Frontend -> Frontend: Optional: Log reason\n"Reason: Sửa chữa điều hòa"

Frontend --> Admin: ✅ Show alert:\n"Cập nhật trạng thái thành công!"

note over DB
  Room 103 is now hidden from
  public search (is_visible filter)
  until status changed back to
  available or occupied
end note

@enduml

