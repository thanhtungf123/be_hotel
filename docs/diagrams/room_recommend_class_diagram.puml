@startuml Room Recommendation - Class Diagram

' Styling
skinparam classAttributeIconSize 0
skinparam class {
    BackgroundColor<<DTO>> LightYellow
    BorderColor Black
    ArrowColor Black
}

' Controller Layer
class RoomController {
    - roomService: RoomService
    __
    + getRecommendedRooms(accountId: Long, type: String, limit: Integer): List<Room>
}

' Service Layer
interface RoomService {
    + recommendRooms(req: RoomRecommendRequest): List<Room>
    + listRooms(): List<Room>
    + search(criteria: RoomSearchCriteria): PagedResponse<Room>
    + checkAvailability(req: RoomAvailabilityRequest): PagedResponse<Room>
}

class RoomServiceImpl {
    - roomRepository: RoomRepository
    - bookingRepository: BookingRepository
    - bedLayoutRepository: BedLayoutRepository
    __
    + recommendRooms(req: RoomRecommendRequest): List<Room>
    - getTopBookedRooms(limit: Integer): List<RoomEntity>
    - getTopRatedRooms(limit: Integer): List<RoomEntity>
    - getPersonalizedRooms(accountId: Integer, limit: Integer): List<RoomEntity>
    - getAvailableRooms(limit: Integer): List<RoomEntity>
}

' Repository Layer
interface RoomRepository {
    + findForList(statusList, layoutNames, minPrice, maxPrice, q, pageable): Page<RoomEntity>
    + findAllById(ids: Iterable<Integer>): List<RoomEntity>
}

interface BookingRepository {
    + countBookingsByRoom(): List<Object[]>
    + findUserPreferredRoomTypes(accountId: Integer): List<Object[]>
    + existsByRoom_IdAndStatusInAndCheckOutAfter(roomId, statuses, date): boolean
}

' DTOs
class RoomRecommendRequest <<DTO>> {
    - accountId: Long
    - type: String
    - limit: Integer
    __
    + RoomRecommendRequest()
    + RoomRecommendRequest(accountId, type, limit)
    + getters/setters
}

class Room <<DTO>> {
    - id: Long
    - roomNumber: String
    - name: String
    - type: String
    - capacity: int
    - priceVnd: int
    - amenities: String[]
    - imageUrl: String
    - status: String
    - isVisible: Boolean
    __
    + getters/setters
}

' Relationships
RoomController --> RoomService : uses
RoomService <|.. RoomServiceImpl : implements
RoomServiceImpl --> RoomRepository : uses
RoomServiceImpl --> BookingRepository : uses
RoomController ..> RoomRecommendRequest : depends on
RoomController ..> Room : returns
RoomServiceImpl ..> Room : creates

' Notes
note right of RoomServiceImpl
  **Recommendation Algorithms:**
  • auto: personalized → popular → top_rated → available
  • personalized: User's booking history
  • popular: Most booked rooms
  • top_rated: Highest rated rooms (future)
end note

note bottom of BookingRepository
  **Statistics Queries:**
  • countBookingsByRoom(): Groups by room_id
  • findUserPreferredRoomTypes(): Groups by bed_layout_id
end note

note top of RoomRecommendRequest
  **Default Values:**
  • type = "auto"
  • limit = 5
end note

@enduml

