@startuml find_room_sequence

skinparam sequenceArrowThickness 2
skinparam roundcorner 10
skinparam maxmessagesize 150

actor User as U
participant "Frontend\n(HeroSearch)" as FE
participant "RoomController" as RC
participant "RoomServiceImpl" as RS
participant "RoomRepository" as RR
database "Database" as DB

title Sequence Diagram: Find Room (QLKS-5)

== User Input ==
U -> FE: Open homepage/search page
activate FE
U -> FE: Fill search form:\n- Check-in: 2025-10-25\n- Check-out: 2025-10-27\n- Guests: 2\n- Price: 1M-5M VND
U -> FE: Click "Tìm phòng" button

FE -> FE: Validate form data
note right
  **Frontend Validation:**
  • Dates are not empty
  • checkOut > checkIn
end note

== API Request ==
FE -> RC: GET /api/rooms/availability?\ncheckIn=2025-10-25&\ncheckOut=2025-10-27&\nguests=2&\npriceMin=1000000&\npriceMax=5000000
activate RC
note right: Public endpoint\n(no auth required)

RC -> RC: Parse date strings to LocalDate
RC -> RC: Create RoomAvailabilityRequest

== Date Validation ==
RC -> RS: checkAvailability(req)
activate RS

RS -> RS: Validate dates
note right
  **Backend Validation:**
  1. checkIn != null
  2. checkOut != null
  3. checkIn < checkOut
  4. checkIn >= today
end note

alt Validation Failed
    RS --> RC: throw IllegalArgumentException
    RC --> FE: HTTP 400 Bad Request\n{"message": "Ngày trả phòng phải sau ngày nhận phòng"}
    FE --> U: Display error message
    
else Validation Passed
    
    == Set Default Values ==
    RS -> RS: Set priceMin = 0 if null
    RS -> RS: Set priceMax = 999999999 if null
    
    == Database Query ==
    RS -> RR: findAvailableRooms(\n  guests=2,\n  checkIn=2025-10-25,\n  checkOut=2025-10-27,\n  priceMin=1000000,\n  priceMax=5000000)
    activate RR
    
    RR -> DB: Execute JPQL query:\nSELECT rooms\nWHERE status='available'\n  AND capacity >= 2\n  AND price BETWEEN 1M-5M\n  AND NOT EXISTS (\n    conflicting bookings\n  )\nORDER BY price ASC
    activate DB
    
    note right of DB
      **Conflict Detection:**
      Exclude rooms with bookings where:
      • status IN ['pending', 'confirmed', 'checked_in']
      • checkIn < booking.checkOut
        AND checkOut > booking.checkIn
      
      **Example:**
      Search: [2025-10-25, 2025-10-27)
      Booking: [2025-10-24, 2025-10-26)
      → CONFLICT! Room excluded
    end note
    
    DB --> RR: List<RoomEntity> (5 rooms)
    deactivate DB
    RR --> RS: List<RoomEntity>
    deactivate RR
    
    == Filtering & Mapping ==
    RS -> RS: Filter by isVisible=true
    note right
      Only show rooms that are
      visible to public users
    end note
    
    RS -> RS: Map each RoomEntity to Room DTO\nusing RoomMapper.toDto()
    note right
      **DTO Mapping:**
      • id, roomNumber, name, type
      • priceVnd, capacity, imageUrl
      • amenities, status, isVisible
    end note
    
    RS -> RS: Wrap results in PagedResponse:\n- data: List<Room>\n- total: 5\n- page: 1\n- pageSize: 5\n- totalPages: 1
    
    == Response ==
    RS --> RC: PagedResponse<Room>
    deactivate RS
    
    RC --> FE: HTTP 200 OK\n+ JSON response
    deactivate RC
    
    == UI Rendering ==
    FE -> FE: Extract rooms from response.data
    FE -> FE: Display results
    note right
      **UI Components:**
      • Header: "Tìm thấy 5 phòng trống"
      • Room cards grid:
        - Image carousel
        - Room name, type
        - Price per night
        - Capacity, amenities
        - "Xem chi tiết" button
      
      **If no results:**
      • Display "Không tìm thấy phòng phù hợp"
      • Suggest adjusting filters
    end note
    
    FE --> U: Display available rooms
    deactivate FE
    
    U -> FE: Click "Xem chi tiết" on room card
    FE -> FE: Navigate to /rooms/{id}
end

@enduml

